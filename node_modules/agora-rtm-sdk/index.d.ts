
// FILE GENERATED BY `rollup-plugin-dts@0.15.1`
// https://github.com/Swatinem/rollup-plugin-dts

/** @zh-cn
 * 连接状态改变原因
 */
/**
 * Reasons for a connection state change.
 */
declare enum ConnectionChangeReason {
    LOGIN = "LOGIN",
    /** @zh-cn
     * SDK 登录 Agora RTM 系统成功
     */
    /**
     * The SDK has logged in the Agora RTM system.
     */
    LOGIN_SUCCESS = "LOGIN_SUCCESS",
    /** @zh-cn
     * SDK 登录 Agora RTM 系统失败。
     */
    /**
     * The SDK fails to log in the Agora RTM system, because, for example, the token has expired.
     */
    LOGIN_FAILURE = "LOGIN_FAILURE",
    /** @zh-cn
     * SDK 无法登录 Agora RTM 系统超过 6 秒，停止登录。
     */
    /**
     * The login has timed out, and the SDK stops logging in. The current login timeout is set as six seconds.
     */
    LOGIN_TIMEOUT = "LOGIN_TIMEOUT",
    /** @zh-cn
     * SDK 与 Agora RTM 系统的连接被中断超过 4 秒。
     */
    /**
     * The connection between the SDK and the Agora RTM system is interrupted for more than four seconds.
     */
    INTERRUPTED = "INTERRUPTED",
    /** @zh-cn
     * SDK 已登出 Agora RTM 系统。
     */
    /**
     * The SDK has logged out of the Agora RTM system.
     */
    LOGOUT = "LOGOUT",
    /** @zh-cn
     * SDK 被服务器禁止登录 Agora RTM 系统。
     */
    /**
     * Login is banned by the Agora RTM server.
     */
    BANNED_BY_SERVER = "BANNED_BY_SERVER",
    /** @zh-cn
     * 另一个用户正以相同的 uid 登陆 Agora RTM 系统。
     */
    /**
     * Another instance has logged in the Agora RTM system with the same uid.
     */
    REMOTE_LOGIN = "REMOTE_LOGIN"
}
/** @zh-cn
 * SDK 与 Agora RTM 系统的连接状态类型
 */
/**
 * Connection states between the SDK and the Agora RTM system.
 */
declare enum ConnectionState {
    /** @zh-cn
     * 初始状态。SDK 未连接到 Agora RTM 系统。
     *
     * App 调用方法 {@link RtmClient.login login} 时，SDK 开始登录 Agora RTM 系统，触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.CONNECTING CONNECTING} 状态。
     *
     */
    /**
     * When the app calls the {@link RtmClient.login login} method, the SDK logs in the Agora RTM system, triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged} callback, and switches to the {@link ConnectionState.CONNECTING CONNECTING} state.
     */
    DISCONNECTED = "DISCONNECTED",
    /** @zh-cn
     * SDK 正在登录 Agora RTM 系统。
     *
     * - 方法调用成功时，SDK 会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.CONNECTED CONNECTED} 状态。</li>
     * - 法调用失败，SDK 会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.DISCONNECTED DISCONNECTED} 状态。</li>
     *
     */
    /**
     * The SDK has logged in the Agora RTM system.
     * <ul>
     *     <li>Success = the SDK triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.CONNECTED CONNECTED} state.</li,
     *     <li>Failure = the SDK triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.DISCONNECTED DISCONNECTED} state.</li,
     * </ul>
     */
    CONNECTING = "CONNECTING",
    /** @zh-cn
     * SDK 已登录 Agora RTM 系统。
     * <ul>
     *     <li>如果 SDK 与 Agora RTM 系统的连接由于网络问题中断，SDK 会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.RECONNECTING RECONNECTING} 状态。</li>
     *     <li>如果 SDK 因为相同 ID 已在其他实例或设备中登录等原因被服务器禁止登录，会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.ABORTED ABORTED} 状态。</li>
     *     <li>如果 App 调用方法 {@link RtmClient.logout logout}，SDK 登出 Agora RTM 系统成功，会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.DISCONNECTED DISCONNECTED} 状态。</li>
     * </ul>
     */
    /**
     * The SDK has logged in the Agora RTM system.
     * <ul>
     *     <li>If the connection between the SDK and the Agora RTM system is interrupted because of network issues, the SDK triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.RECONNECTING RECONNECTING} state.</li>
     *     <li>If the login is banned by the server, for example, another instance has logged in with the same uid from a different device, the SDK triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.ABORTED ABORTED} state.</li>
     *     <li>If the app calls the {@link RtmClient.logout} method and the SDK successfully logs out of the Agora RTM system, the SDK triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.DISCONNECTED DISCONNECTED} state.</li>
     * </ul>
     */
    CONNECTED = "CONNECTED",
    /** @zh-cn
     * SDK 正在重新登录 Agora RTM 系统。
     *
     * <ul>
     *     <li>如果 SDK 重新登录 Agora RTM 系统成功，会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.CONNECTED CONNECTED} 状态。</li>
     *     <li>如果 SDK 重新登录 Agora RTM 系统失败，会保持  {@link ConnectionState.RECONNECTING RECONNECTING} 状态。</li>
     *     <li>如果登录被服务器拒绝，SDK 会触发回调 {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged}，并切换到 {@link ConnectionState.ABORTED ABORTED} 状态。</li>
     * </ul>
     *
     */
    /**
     * The SDK keeps logging in the Agora RTM system.
     * <ul>
     *     <li>If the SDK successfully logs in the Agora RTM system again, it triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.CONNECTED CONNECTED} state.</li>
     *     <li>If the SDK fails to log in the Agora RTM system again, the SDK stays in the {@link ConnectionState.RECONNECTING RECONNECTING} state. </li>
     *     <li>If the login is rejected by the server, the SDK triggers the {@link RtmClientEvents.ConnectionStateChanged ConnectionStateChanged ConnectionStateChanged} callback and switches to the {@link ConnectionState.ABORTED ABORTED} state.</li>
     * </ul>
     */
    RECONNECTING = "RECONNECTING",
    /** @zh-cn
     * SDK 停止登录 Agora RTM 系统。
     *
     * <p>原因可能为：</p>
     * <p><ul>
     * <li>另一实例已经以同一用户 ID 登录 Agora RTM 系统。</li>
     * <li>token 已过期。</li></ul></p>
     * 请在调用方法 {@link RtmClient.logout logout} 后，调用方法 {@link RtmClient.login login} 登录 Agora RTM 系统。</p>
     */
    /**
     * The SDK gives up logging in the Agora RTM system, possibly because another instance has logged in the Agora RTM system with the same uid.
     *
     * <p>Call the {@link RtmClient.logout logout} method before calling the {@link RtmClient.login login} method to log in the Agora RTM system again.</p>
     */
    ABORTED = "ABORTED"
}
declare enum LocalInvitationState {
    /** @zh-cn
     * 返回给主叫的呼叫邀请状态码：初始状态。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The initial state of a call invitation (idle).
     */
    IDLE = "IDLE",
    /** @zh-cn
     * 仅供内部使用
     */
    /**
     * FOR INTERNAL USE ONLY. The call invitation is sent to the callee.
     */
    SENT_TO_REMOTE = "SENT_TO_REMOTE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请状态码：被叫已收到呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The call invitation is received by the callee.
     */
    RECEIVED_BY_REMOTE = "RECEIVED_BY_REMOTE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请状态码：被叫已接受呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The call invitation is accepted by the callee.
     */
    ACCEPTED_BY_REMOTE = "ACCEPTED_BY_REMOTE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请状态码：被叫已拒绝呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The call invitation is declined by the callee.
     */
    REFUSED_BY_REMOTE = "REFUSED_BY_REMOTE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请状态码：已成功取消呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> You have canceled the call invitation.
     */
    CANCELED = "CANCELED",
    /** @zh-cn
     * 返回给主叫的呼叫邀请状态码：呼叫邀请发送失败。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The life cycle of the call invitation ends in failure.
     */
    FAILURE = "FAILURE"
}
declare enum RemoteInvitationState {
    /** @zh-cn
     * 返回给被叫的呼叫邀请状态码：收到了来自主叫的呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> A call invitation from a remote caller is received.
     */
    INVITATION_RECEIVED = "INVITATION_RECEIVED",
    /** @zh-cn
     * 仅供内部使用。
     */
    /**
     * FOR INTERNAL USE ONLY. The message is sent to the the caller that the callee has accpeted the invitation.
     */
    ACCEPT_SENT_TO_LOCAL = "ACCEPT_SENT_TO_LOCAL",
    /** @zh-cn
     * 返回给被叫的呼叫邀请状态码：已拒绝来自主叫的呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> You have declined the call invitation.
     */
    REFUSED = "REFUSED",
    /** @zh-cn
     * 返回给被叫的呼叫邀请状态码：已接受来自主叫的呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> You have accepted the call invitation.
     */
    ACCEPTED = "ACCEPTED",
    /** @zh-cn
     * 返回给被叫的呼叫邀请状态码：主叫已取消呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> The call invitation is canceled by the caller.
     */
    CANCELED = "CANCELED",
    /** @zh-cn
     * 返回给被叫的呼叫邀请状态码：来自主叫的呼叫邀请发送失败。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> The life cycle of the incoming call invitation ends in failure.
     */
    FAILURE = "FAILURE"
}
declare enum LocalInvitationFailureReason {
    /** @hidden */
    UNKNOWN = "UNKNOWN",
    /** @zh-cn
     * 返回给主叫的呼叫邀请错误原因：呼叫邀请无响应。呼叫邀请发出 30 秒后仍无法确认被叫是否收到呼叫邀请。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The callee is online but has not ACKed to the call invitation 30 seconds since it is sent.
     */
    PEER_NO_RESPONSE = "PEER_NO_RESPONSE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请错误原因：确认被叫收到呼叫邀请，但在呼叫邀请后 60 秒如果被叫确认收到呼叫邀请，而主叫被叫均未对呼叫邀请采取任何操作（取消、接受、拒绝），则呼叫邀请过期。
     */
    /**
     * <b>RETURNED TO THE CALLER. SAVED FOR FUTURE USE.</b> The call invitation expires 60 seconds since it is sent, if the callee ACKs to the call invitation but neither the caller or callee takes any further action (cancel, accpet, or decline it).
     */
    INVITATION_EXPIRE = "INVITATION_EXPIRE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请错误原因：被叫不在线。
     * <p> SDK 会在被叫不在线时不断重发呼叫邀请。若消息发送 30 秒后被叫仍未上线，SDK 会返回此错误原因。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The callee is offline.
     *   <p> The SDK performs the following:
     *   <ul>
     *     <li>Keeps resending the call invitation to the callee, if the callee is offline.</li>
     *     <li>Returns this error code, if the callee is still offline 30 seconds since the call invitation is sent.</li>
     *   </ul>
     *
     */
    PEER_OFFLINE = "PEER_OFFLINE",
    /** @zh-cn
     * 返回给主叫的呼叫邀请错误原因：主叫未登录。
     */
    /**
     * <b>RETURNED TO THE CALLER.</b> The user has not logged in.
     */
    NOT_LOGGEDIN = "NOT_LOGGEDIN"
}
declare enum RemoteInvitationFailureReason {
    /** @hidden */
    UNKNOWN = "UNKNOWN",
    /** @zh-cn
     * 返回给被叫的呼叫邀请错误原因：主叫不在线，呼叫邀请失败。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> The call invitation received by the caller fails: the caller is offline.
     */
    PEER_OFFLINE = "PEER_OFFLINE",
    /** @zh-cn
     * 返回给被叫的呼叫邀请错误原因：接受呼叫邀请失败。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> The call invitation received by callee fails: the acceptance of the call invitation fails.
     */
    ACCEPT_FAILURE = "ACCEPT_FAILURE",
    /** @zh-cn
     * 返回给被叫的呼叫邀请错误原因：呼叫邀请过期。呼叫邀请发送 60 秒后如果被叫确认收到呼叫邀请，而主叫被叫均未对呼叫邀请采取任何操作（取消、接受、拒绝），则呼叫邀请过期。
     */
    /**
     * <b>RETURNED TO THE CALLEE.</b> The call invitation received by the callee fails: the call invitation expires 60 seconds since it is sent, if the callee responds to the call invitation but neither the caller nor callee takes any further action ever since (cancel, accpet, or decline it).
     */
    INVITATION_EXPIRE = "INVITATION_EXPIRE"
}

/** @hidden */
declare type ListenerType<T> = [T] extends [(...args: infer U) => any]
  ? U
  : [T] extends [void]
  ? []
  : [T];
/** @hidden */
declare class EventEmitter<TEventRecord> {
  static defaultMaxListeners: number;
  on<P extends keyof TEventRecord, T>(
    this: T,
    event: P,
    listener: (...args: ListenerType<TEventRecord[P]>) => void
  ): this;

  once<P extends keyof TEventRecord, T>(
    this: T,
    event: P,
    listener: (...args: ListenerType<TEventRecord[P]>) => void
  ): this;

  off<P extends keyof TEventRecord, T>(
    this: T,
    event: P,
    listener: (...args: any[]) => any
  ): this;

  removeAllListeners<P extends keyof TEventRecord, T>(this: T, event?: P): this;
  listeners<P extends keyof TEventRecord, T>(this: T, event: P): Function[];
  rawListeners<P extends keyof TEventRecord, T>(this: T, event: P): Function[];
  listenerCount<P extends keyof TEventRecord, T>(this: T, event: P): number;
}

/** @zh-cn
 * {@link LocalInvitation} 对象实例上的事件类型。
 */
/**
 * Event types of the {@link LocalInvitation} instance.
 */
interface LocalInvitationEvents {
  /** @zh-cn
   * 返回给主叫：被叫已接受呼叫邀请。
   *
   * <p><b>Note:</b></p>
   * 最大长度为 8 KB。
   *
   * @param response 被叫设置的响应内容。
   */
  /**
   * Callback to the caller: occurs when the callee accepts the call invitation.
   *
   * <p><b>Note:</b></p>
   * The maximum length is 8 KB.
   *
   * @param response The response from the callee.
   */
  LocalInvitationAccepted: (response: string) => void;
  /** @zh-cn
   * 返回给主叫：被叫已拒绝呼叫邀请。
   *
   * <p><b>Note:</b></p>
   * 最大长度为 8 KB。
   *
   * @param response 被叫设置的响应内容。
   */
  /**
   * Callback to the caller: occurs when the callee refuses the call invitation.
   *
   * <p><b>Note:</b></p>
   * The maximum length is 8 KB.
   *
   * @param response The response from the callee.
   */
  LocalInvitationRefused: (response: string) => void;
  /** @zh-cn
   * 返回给主叫：被叫已收到呼叫邀请。
   */
  /**
   * Callback to the caller: occurs when the callee receives the call invitation.
   *
   * This callback notifies the caller that the callee receives the call invitation.
   */
  LocalInvitationReceivedByPeer: () => void;
  /** @zh-cn
   * 返回给主叫：呼叫邀请已被成功取消。
   */
  /**
   * Callback to the caller: occurs when the caller cancels a call invitation.
   *
   * This callback notifies the caller that he/she has canceled a call invitation.
   */
  LocalInvitationCanceled: () => void;
  /** @zh-cn
   * 返回给主叫：呼叫邀请进程失败。
   *
   * @param reason 呼叫邀请的失败原因。详见： {@link LocalInvitationFailureReason} 。
   */
  /**
   * Callback to the caller: occurs when the outgoing call invitation ends in failure.
   *
   * @param reason See: {@link LocalInvitationFailureReason}.
   */
  LocalInvitationFailure: (reason: LocalInvitationFailureReason) => void;
}

/** @zh-cn
 * 由主叫通过 {@link createLocalInvitation} 方法创建，仅供主叫调用的呼叫邀请对象。
 * @noInheritDoc
 */
/**
 * The call invitation object created by calling the {@link createLocalInvitation} method, and called only by the caller.
 * @noInheritDoc
 */
declare class LocalInvitation extends EventEmitter<
  LocalInvitationEvents
> {
  /** @zh-cn
   * 被叫设置的响应内容。
   * @readonly
   */

  /**
   * The callee's response to the call invitation.
   * @readonly
   */
  readonly response: string;
  /**
   * 供主叫查看的呼叫邀请状态。
   *
   * 详见: {@link LocalInvitationState} 。
   * @readonly
   */
  /**
   * State of the outgoing call invitation.
   *
   * See: {@link LocalInvitationState}.
   * @readonly
   */
  readonly state: LocalInvitationState;
  /** @zh-cn
   * 主叫设置的呼叫邀请内容。
   * <p><b>Note:</b></p>
   * 最大长度为 8 KB。
   */

  /**
   * Call invitation content set by the caller.
   * <p><b>Note:</b></p>
   * The maximum length is 8 KB.
   */
  content: string;
  /** @zh-cn
   * 被叫的 uid。
   */
  /**
   * uid of the callee.
   */
  calleeId: string;
  /** @zh-cn
   * 向指定用户（被叫）发送呼叫邀请。
   */
  /**
   * Send a call invitation to a specified remote user (callee).
   */
  send(): void;
  /** @zh-cn
   * 取消已发送的呼叫邀请。
   */
  /**
   * Allows the caller to cancel a sent call invitation.
   */
  cancel(): void;
}

/** @zh-cn
 * {@link RemoteInvitation} 对象实例上的事件类型。
 */
/**
 * Event types of the {@link RemoteInvitation} instance.
 */
interface RemoteInvitationEvents {
  /** @zh-cn
   * 返回给被叫：主叫已取消呼叫邀请。
   */
  /**
   * Callback to the callee: occurs when the caller cancels the call invitation.
   */
  RemoteInvitationCanceled: () => void;
  /** @zh-cn
   * 返回给被叫：拒绝呼叫邀请成功。
   */
  /**
   * Callback for the callee: occurs when the callee successfully declines the incoming call invitation.
   */
  RemoteInvitationRefused: () => void;
  /** @zh-cn
   * 返回给被叫：接受呼叫邀请成功。
   */
  /**
   * Callback to the callee: occurs when the callee accepts a call invitation.
   */
  RemoteInvitationAccepted: () => void;
  /** @zh-cn
   * 返回给被叫：呼叫邀请进程失败。
   * @param reason 呼叫邀请失败原因。详见： {@link RemoteInvitationFailureReason} 。
   */
  /**
   * Callback to the callee: occurs when the life cycle of the incoming call invitation ends in failure.
   *
   * @param reason See: {@link RemoteInvitationFailureReason}.
   */
  RemoteInvitationFailure: (reason: RemoteInvitationFailureReason) => void;
}

/** @zh-cn
 * 由 SDK 创建供被叫调用的呼叫邀请对象。
 * @noInheritDoc
 */
/**
 * The call invitation object created by the SDK and called by the callee.
 * @noInheritDoc
 */
declare class RemoteInvitation extends EventEmitter<
  RemoteInvitationEvents
> {
  /** @zh-cn
   * 主叫的 uid。
   * @readonly
   */
  /**
   * uid of the caller.
   * @readonly
   */
  readonly callerId: string;
  /** @zh-cn
   * 主叫设置的呼叫邀请内容。
   * @readonly
   * <p><b>Note:</b></p>
   * 最大长度为 8 KB。
   */

  /**
   * The call invitation content set by the caller.
   * @readonly
   * <p><b>Note:</b></p>
   * The maximum length is 8 KB.
   */
  readonly content: string;
  /** @zh-cn
   * 呼叫邀请的状态。详见： {@link RemoteInvitationState} 。
   * @readonly
   */
  /**
   * States of the incoming call invitation. See: {@link RemoteInvitationState} .
   * @readonly
   */
  readonly state: RemoteInvitationState;
  /** @zh-cn
   * 被叫设置的响应内容。
   * <p><b>Note:</b></p>
   * 最大长度为 8 KB。
   */

  /**
   * Response to the incoming call invitation.
   * <p><b>Note:</b></p>
   * The maximum length is 8 KB.
   */
  response: string;
  /** @zh-cn
   * 接受来自主叫的呼叫邀请。
   */
  /**
   * Allows the callee to accept an incoming call invitation.
   */
  accept(): void;
  /** @zh-cn
   * 拒绝来自主叫的呼叫邀请。
   */
  /**
   * Allows the callee to decline an incoming call invitation.
   */
  refuse(): void;
}

/** @zh-cn
 * RTM 消息接口，用于发送和接收消息。
 */
/**
 * Interface for sending and receiving channel or peer-to-peer messages.
 */
interface RtmMessage {
  /** @zh-cn
   * 要发送的文本信息
   * <p><b>Note:</b></p>
   * 最大长度为 32 KB。
   */

  /**
   * Message to be sent.
   * <p><b>Note:</b></p>
   * The maximum length is 32 KB.
   */
  text: string;
}

/** @zh-cn
 * 该对象表示点对点消息的投递结果。
 */
/**
 * An object containing the result of delivering the peer-to-peer message.
 */
interface RtmPeerMessageSendResult {
  /** @zh-cn
   * 该布尔值属性代表消息接收方是否已收到发出的消息。
   * - `true`: 点对点消息投递成功，对方已收到；
   * - `false`: 对方不在线，未收到该消息。
   *
   */
  /**
   * This boolean property indicates whether the remote peer user receives the sent message.
   * - `true`: the peer user receives the message.</li>
   * - `false`: the peer user is offline and does not receive the message.</li>
   *
   */
  hasPeerReceived: boolean;
}

interface SendMessageOptions {
  /** @zh-cn
   * 开启离线消息。
   * <p><ul>
   * <li> true: 开启离线消息。</li>
   * <li> false: （默认）关闭离线消息。</li>
   * </ul>
   */
  enableOfflineMessaging?: boolean;
  enableMessageLogging?: boolean | { label: string };
}

interface ReceiveMessageProperties {
  /** @zh-cn
   * 消息服务器接收到消息的时间戳（毫秒）。
   *
   * **Note**
   * 时间戳的精度为毫秒级。仅用于展示，不建议用于消息的严格排序。
   */
  serverReceivedTs: number;
  /** @zh-cn
   * 消息是否为离线消息。
   */
  isOfflineMessage: boolean;
}

/** @zh-cn
 * RTM 频道对象，通过 RtmClient 对象实例上的 {@link createChannel} 方法创建。
 * @noInheritDoc
 */
/**
 * The RTM channel instance created by calling the {@link createChannel} method of the RtmClient instance.
 * @noInheritDoc
 */
declare class RtmChannel extends EventEmitter<RtmChannelEvents> {
  /** @zh-cn
   * @readonly
   * 获取该频道实例的 ID。
   */
  /**
   * @readonly
   * Retrieves the ID of the RTM channel instance.
   */
  readonly channelId: string;

  /** @zh-cn
   * 发送频道消息，所有加入频道的用户都会收到该频道消息。
   *
   * 发送消息（包括点对点消息和频道消息）的频率上限为 60 qps。
   * @example **发送频道消息。**
   *
   * ```JavaScript
   * channel.sendMessage({ text: 'test channel message' }).then(() => {
   * // 你的代码：频道消息发送成功处理逻辑。
   * }).catch(error) => {
   * // 你的代码：频道消息发送失败处理逻辑。
   * })
   * ```
   * @param message 要发送的消息对象。
   * @return 该 Promise 会在发送频道消息成功后 resovle。
   */
  /**
   * Allows a user to send a message to all users in a channel.
   *
   * You can send messages, including peer-to-peer and channel messages at a maximum speed of 60 queries per second.
   * @example **Sending a channel message.**
   *
   * ```JavaScript
   * channel.sendMessage({ text: 'test channel message' }).then(() => {
   * // Your code for handling the event when the channel message is successfully sent.
   * }).catch(error) => {
   * // Your code for handling the event when the channel message fails to be sent.
   * })
   * ```
   * @param message The message to be sent.
   * @return The Promise resolves after the user successfully sends a channel message.
   */
  sendMessage(message: RtmMessage): Promise<void>;

  /** @zh-cn
   * 调用该方法加入该频道，加入频道成功后可收到该频道消息和频道用户进退通知。
   *
   * 你最多可以加入 20 个频道。
   * @return 该 Promise 会在加入频道成功后 resolve。
   */
  /**
   * Allows a user to join a channel. After joining the channel, the user can receive channel messages and notifications of other users joining or leaving the channel.
   *
   * You can join a maximum of 20 channels.
   * @return The Promise resolves after the user successfully joins the channel.
   */
  join(): Promise<void>;

  /** @zh-cn
   * 调用该方法离开该频道，不再接收频道消息和频道用户进退通知。
   * @return 该 Promise 会在离开频道成功后 resolve。
   */
  /**
   * Allows a user to leave a joined channel. After leaving the channel, the user does not receive channel messages or notifications of users joining or leaving the channel.
   * @return The Promise resolves after the user successfully leaves the channel.
   */
  leave(): Promise<void>;

  /** @zh-cn
   * 获取频道用户列表
   * @return 该 Promise 会在成功获取频道用户列表后 resolve。Promise 返回的值为该频道所有用户 ID 的数组。
   */
  /**
   * Gets the member list of the channel.
   * @return The Promise resolves after the user gets the member list of the channel in an array with the channel's uids.
   */
  getMembers(): Promise<string[]>;

  /** @zh-cn
   * 在该频道实例上添加 `listener` 函数到名为 `eventName` 的事件。其他 `RtmChannel` 实例上的事件方法请参考 [`EventEmitter` API 文档](https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter)。
   * @param eventName 频道事件的名称。事件列表请参考 {@link RtmChannelEvents} 中的属性名。
   * @param listener 事件的回调函数。
   */
  /**
   * Adds the `listener` function to the channel for the event named `eventName`. See [the `EventEmitter` API documentation](https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter) for other event methods on the `RtmChannel` instance.
   * @param eventName The name of the channel event. See the property names in the {@link RtmChannelEvents} for the list of events.
   * @param listener The callback function of the channel event.
   */
  on<EventName extends keyof RtmChannelEvents>(
    eventName: EventName,
    listener: (...args: ListenerType<RtmChannelEvents[EventName]>) => any
  ): this;
}

/** @zh-cn
 * {@link RtmChannel} 对象实例上的事件类型。
 * 该接口中，函数属性的名称为事件名称，函数的参数为事件监听回调的传入参数。
 *
 * @example **监听频道消息**
 *
 * ```JavaScript
 * channel.on('ChannelMessage', function (message, memberId) {
 *   // 你的代码：收到频道消息。
 * });
 * ```
 * @example **监听用户加入频道事件**
 *
 * ```JavaScript
 * channel.on('MemberJoined', memberId => {
 * // 你的代码：用户已加入频道。
 * })
 * ```
 * @example **监听用户离开频道事件**
 *
 * ```JavaScript
 * channel.on('ChannelMessage', function (message, memberId) {
 *   // 你的代码：用户已离开频道。
 * });
 * ```
 */
/**
 * Event types of the {@link RtmChannel} instance.
 * In this interface, the function property’s name is the event name; the function property’s parameters is the parameters of the event listener function.
 *
 * @example **Listening to channel messages.**
 *
 * ```JavaScript
 * channel.on('ChannelMessage', function (message, memberId) {
 *   // Your code.
 * });
 * ```
 * @example **Listening to events, such as a user joining the channel.**
 *
 * ```JavaScript
 * channel.on('MemberJoined', memberId => {
 * // Your code.
 * })
 * ```
 * @example **Listening to events, such as a member leaving the channel**
 *
 * ```JavaScript
 * channel.on('ChannelMessage', function (message, memberId) {
 *   // Your code.
 * });
 * ```
 */
interface RtmChannelEvents {
  /** @zh-cn
   * 收到频道消息的事件通知。
   * @event
   * @param message 接收到的频道消息对象。
   * @param memberId 该频道消息的发送者 uid。
   */
  /**
   * Occurs when the local user receives a channel message.
   * @event
   * @param message The received channel message object.
   * @param memberId The uid of the sender.
   */
  ChannelMessage: (message: RtmMessage, memberId: string) => void;

  /** @zh-cn
   * 收到用户离开频道的通知。
   * <p><b>Note:</b></p>
   * 当频道成员超过 512 时，该回调失效。
   * @event
   * @param memberId 离开频道的远端用户的 uid。
   */
  /**
   * Occurs when a user leaves the channel.
   * <p><b>Note:</b></p>
   * This callback is disabled when the number of the channel members exceeds 512.
   * @event
   * @param memberId The uid of the user leaving the channel.
   */
  MemberLeft: (memberId: string) => void;

  /** @zh-cn
   * 收到用户加入频道的通知。
   * <p><b>Note:</b></p>
   * 当频道成员超过 512 时，该回调失效。
   * @event
   * @param memberId 加入频道的用户的 uid。
   */
  /**
   * Occurs when a user joins a channel.
   * <p><b>Note:</b></p>
   * This callback is disabled when the number of the channel members exceeds 512.
   * @event
   * @param memberId The uid of the user joining the channel.
   */
  MemberJoined: (memberId: string) => void;
}

/** @zh-cn
 * RTM 客户端对象，通过 {@link AgoraRTM} 上的 {@link createInstance} 方法创建。Agora RTM SDK 的入口。
 * @noInheritDoc
 */
/**
 * `RtmClient` is the entry point of the Agora RTM SDK. You can call the {@link createInstance} method of {@link AgoraRTM} to create an `RtmClient` instance.
 * @noInheritDoc
 */
declare class RtmClient extends EventEmitter<RtmClientEvents> {
  /** @zh-cn
   * 用户登录 Agora RTM 系统。
   *
   * <p><b>Note:</b></p>
   * 如果你在不同实例中以相同用户 ID 登录，之前的登录将会失效，你会被踢出之前加入的频道。
   * @param options.uid 登录 Agora RTM 系统的用户 ID。该字符串不可超过 64 字节或以空格开头。以下为支持的字符集范围:<ul>
   * <li>26 个小写英文字母 a-z</li>
   * <li>26 个大写英文字母 A-Z</li>
   * <li>10 个数字 0-9</li>
   * <li>空格</li>
   * <li>"!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=", ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ","</li>
   * </ul>
   * <p><b>Note:</b></p><ul>
   * <li>请不要将 uid 设置为字符串 "null" ，或以空格开头。</li>
   * <li>uid 不支持 <code>number</code> 类型。建议调用 <code>toString()</code> 方法转化非 string 型 uid。</li>
   * </ul>
   * @param options.token 可选的动态密钥，一般由客户的服务端获取。
   * @return 该 Promise 会在登录成功后 resolve。
   */
  /**
   * Allows a user to log in the Agora RTM system.
   *
   * <p><b>Note:</b></p>
   * If you log in with the same uid from a different instance, you will be kicked out of your previous login and removed from previously joined channels.
   * @param options.uid The uid of the user logging in the Agora RTM system. The uid must not start with a space and the string length must be less than 64 bytes with the following character scope:<ul>
   * <li>The 26 lowercase English letters: a to z</li>
   * <li>The 26 uppercase English letters: A to Z</li>
   * <li>The 10 numbers: 0 to 9</li>
   * <li>Space</li>
   * <li>"!", "#", "$", "%", "&", "(", ")", "+", "-", ":", ";", "<", "=", ".", ">", "?", "@", "[", "]", "^", "_", " {", "}", "|", "~", ","</li>
   * </ul>
   * <p><b>Note:</b></p><ul>
   * <li>The uid cannot be empty or set as the "null" string.</li>
   * <li>We do not support uids of the <code>number</code> type and recommend using the <code>toString()</code> method to convert your non-string uid.</li>
   * </ul>
   * @param options.token An optional token generated by the app server.
   * @return The Promise resolves after the user logs in the Agora RTM system successfully.
   */
  login(options: { uid: string; token?: string }): Promise<void>;

  /** @zh-cn
   * 退出登录，退出后自动断开连接和销毁回调监听。
   * @return 该 Promise 会在登出成功并断开 WebSocket 连接后 resolve。
   */
  /**
   * Allows a user to log out of the Agora RTM system.
   *
   * After the user logs out of the Agora RTM system, the SDK disconnects from the Agora RTM system and destroys the corresponding event listener.
   * @return The Promises resolves after the user logs out of the Agora RTM system and disconnects from WebSocket.
   */
  logout(): Promise<void>;

  /** @zh-cn
   * 本地用户（发送者）向指定用户（接收者）发送点对点消息。
   * <p>发送消息（包括点对点消息和频道消息）的频率上限为 60 qps。</p>
   * @example
   * ```JavaScript
   * client.sendMessageToPeer(
   *   { text: 'test peer message' }, // 一个 RtmMessage 对象。
   *   'PeerId', // 对端用户的 uid。
   * ).then(sendResult => {
   *   if (sendResult.hasPeerReceived) {
   *     // 你的代码：远端用户收到消息事件。
   *   } else {
   *     // 你的代码：服务器已收到消息，对端未收到消息。
   *   }
   * }).catch(error => {
   *   // 你的代码：点对点消息发送失败。
   * });
   * ```
   * @param message 要发送的文字消息。
   * @param peerId 远端用户的 uid。
   * @param options 要发送的消息选项。
   * <p><b>Note:</b></p>
   * uid 不支持 <code>number</code> 类型。建议调用 <code>toString()</code> 方法转化非 string 型 uid。
   * @return 该 Promise 会在发送成功后 resolve。resolve 的值代表对方是否在线并接收成功。
   */
  /**
   * Allows a user to send a peer-to-peer message to a specific remote user.
   * <p>You can send messages, including peer-to-peer and channel messages at a maximum speed of 60 queries per second.</p>
   * @example
   * ```JavaScript
   * client.sendMessageToPeer(
   *   { text: 'test peer message' }, // An RtmMessage object.
   *   'demoPeerId', // The uid of the remote user.
   * ).then(sendResult => {
   *   if (sendResult.hasPeerReceived) {
   *     // Your code for handling the event when the remote user receives the message.
   *   } else {
   *     // Your code for handling the event when the message is received by the server but the remote user cannot be reached.
   *   }
   * }).catch(error => {
   *   // Your code for handling the event when the message fails to be sent.
   * });
   * ```
   * @param message The message to be sent.
   * @param peerId  The uid of the peer user.
   * @param options The options of the message to be sent.
   * <p><b>Note:</b></p>
   * We do not support uids of the <code>number</code> type and recommend using the <code>toString()</code> method to convert your non-string uid.
   * @return The Promise resolves after the message is successfully sent. The value of the resolve indicates whether the peer user is online and receives the message.
   */
  sendMessageToPeer(
    message: RtmMessage,
    peerId: string,
    options?: SendMessageOptions
  ): Promise<RtmPeerMessageSendResult>;

  /** @zh-cn
   * 该方法创建一个 {@link RtmChannel} 对象实例。
   * @param channelId 频道名称
   * @return 一个 {@link RtmChannel} 对象实例。
   */
  /**
   * Creates an {@link RtmChannel} instance.
   * @param channelId The unique channel name of the Agora RTM channel.
   * @return An {@link RtmChannel} instance.
   */
  createChannel(channelId: string): RtmChannel;
  /** @zh-cn
   * 该方法创建一个 {@link LocalInvitation} 对象实例。
   * @param calleeId 被叫的 uid。
   * @return 一个 {@link LocalInvitation} 对象实例。
   */
  /**
   * Creates a {@link LocalInvitation} instance.
   * @param calleeId The uid of the callee.
   * @return A {@link LocalInvitation} instance.
   */
  createLocalInvitation(calleeId: string): LocalInvitation;

  setLocalUserAttributes(attributes: { [key: string]: string }): Promise<void>;

  /** @zh-cn
   * 添加或更新本地用户的属性。
   */
  addOrUpdateLocalUserAttributes(attributes: {
    [key: string]: string;
  }): Promise<void>;

  deleteLocalUserAttributesByKeys(attributeKeys: string[]): Promise<void>;
  clearLocalUserAttributes(): Promise<void>;
  getUserAttributes(userId: string): Promise<{ [key: string]: string }>;
  getUserAttributesByKeys(
    userId: string,
    attributeKeys: string[]
  ): Promise<{ [key: string]: string }>;

  /** @zh-cn
   * 查询指定用户的在线状态。
   */
  queryPeersOnlineStatus(
    peerIds: string[]
  ): Promise<{ [peerId: string]: boolean }>;

  /** @zh-cn
   * 更新当前 Token。
   */
  renewToken(token: string): Promise<void>;

  /** @zh-cn
   * 在该频道实例上添加 `listener` 函数到名为 `eventName` 的事件。其他 `RtmClient` 实例上的事件方法请参考 [`EventEmitter` API 文档](https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter)。
   * @param eventName RTM 客户端事件的名称。事件列表请参考 {@link RtmClientEvents} 中的属性名。
   * @param listener 事件的回调函数。
   */
  /**
   * Adds the `listener` function to the channel for the event named `eventName`. See [the `EventEmitter` API documentation](https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter) for other event methods on the `RtmClient` instance.
   * @param eventName The name of the RTM client event. See the property names in the {@link RtmClientEvents} for the list of events.
   * @param listener The callback function of the RTM client event.
   */
  on<EventName extends keyof RtmClientEvents>(
    eventName: EventName,
    listener: (...args: ListenerType<RtmClientEvents[EventName]>) => any
  ): this;
}

/** @zh-cn
 * {@link RtmClient} 对象实例上的事件类型。
 * 该接口中，函数属性的名称为事件名称，函数的参数为事件监听回调的传入参数。
 *
 * @example **监听点对点消息**
 *
 * ```JavaScript
 * client.on('MessageFromPeer', function (message, peerId) {
 *   // Your code.
 * });
 * ```
 */
/**
 * Event listener type of the {@link RtmClient} instance.
 * In this interface, the function property’s name is the event name; the function property’s parameters is the parameters of the event listener function.
 *
 * @example **Listening to peer-to-peer messages.**
 *
 * ```JavaScript
 * client.on('MessageFromPeer', function (message, peerId) {
 *   // Your code.
 * });
 * ```
 */
interface RtmClientEvents {
  /** @zh-cn
   * 收到来自对端的点对点消息。
   * @event
   * @param message 远端用户发送的消息对象。
   * @param peerId 发送该消息的远端用户 uid。
   * @param messageProps 接收到的消息的属性。
   */
  /**
   * Occurs when the local user receives a peer-to-peer message from a remote user.
   * @event
   * @param message The received peer-to-peer message object.
   * @param peerId The uid of the sender.
   * @param messageProps The properties of the received message.
   */
  MessageFromPeer: (
    message: RtmMessage,
    peerId: string,
    messageProps: ReceiveMessageProperties
  ) => void;

  /** @zh-cn
   * 通知 SDK 与 Agora RTM 系统的连接状态发生了改变
   * @event
   * @param newState 新的连接状态
   * @param reason 状态改变的原因
   */
  /**
   * Occurs when the connection state changes between the SDK and the Agora RTM system.
   * @event
   * @param newState The new connection state.
   * @param reason Reasons for the connection state change.
   */
  ConnectionStateChanged: (
    newState: ConnectionState,
    reason: ConnectionChangeReason
  ) => void;
  /** @zh-cn
   * 收到来自主叫的呼叫邀请。
   * @event
   * @param remoteInvitation 一个 {@link RemoteInvitation} 对象。
   */
  /**
   * Occurs when the callee receives a call invitation from a remote user (caller).
   * @event
   * @param remoteInvitation A {@link RemoteInvitation} object.
   */
  RemoteInvitationReceived: (remoteInvitation: RemoteInvitation) => void;

  /** @zh-cn
   * 该回调在 Token 过期时触发。收到该回调时，请尽快在你的业务服务端生成新的 Token 并调用 renewToken 方法把新的 Token 传给 Token 验证服务器。
   */
  TokenExpired: () => void;
}

/** @zh-cn
 * `RtmClient` 对象的配置参数。
 */
/**
 * Interface for the configurable parameters of an `RtmClient` instance.
 */
interface RtmParameters {
  /** @zh-cn
   * 设置是否上传日志。默认关闭。
   * - `true`: 启用日志上传；
   * - `false`: （默认）关闭日志上传。
   */
  /**
   * Configures whether to enable log upload. It is set to `false` by default.
   * - `true`: Enable log upload,
   * - `false`: (Default) Disable log upload.
   */
  enableLogUpload?: boolean;
}

/** @zh-cn
 * AgoraRTM 是 Agora RTM SDK 的导出模块。
 *
 * 使用 `<script>` 标签引入 SDK 时，产生名为 `AgoraRTM` 的全局变量，该变量含有该模块的所有成员。
 *
 * @example 直接在 HTML 中引入 `<script src="agora-rtm-sdk-0.9.1.js"></script>`。
 *
 * **Note:**
 *
 * 此处文件名 `agora-rtm-sdk-0.9.1.js` 中的版本号 `0.9.1` 仅供参考，安装时请使用最新版的 SDK 和链接地址。
 */
/**
 * AgoraRTM is the exported module of the Agora RTM SDK.
 *
 * If you import the Agora RTM Web SDK using the `<script>` tag, the SDK creates a global variable called `AgoraRTM`, which includes all the module members.
 *
 * @example Direct include `<script src="agora-rtm-sdk-0.9.1.js"></script>` in your HTML.
 * <p><b>Note:</b></p>
 * <p>The version `0.9.1` in the file name `agora-rtm-sdk-0.9.1.js` is for reference only, please use the latest version of the SDK.
 */
declare namespace AgoraRTM {
  /** @zh-cn
   * Agora RTM SDK 的版本号。
   */
  /**
   * Version of the Agora RTM SDK.
   * @example `AgoraRTM.VERSION`
   */
  const VERSION: string;

  /** @zh-cn
   * Agora RTM SDK 的编译信息。
   */
  /**
   * Compilation information of the Agora RTM SDK.
   * @example `AgoraRTM.BUILD`
   */
  const BUILD: string;

  /** @zh-cn
   * 该方法创建并返回一个 `RtmClient` 对象实例。
   * <p> Agora RTM SDK 支持多个 {@link RtmClient} 实例。</p>
   * <p> {@link RtmClient} 类的所有接口函数都是异步调用。</p>
   * @example **创建 RtmClient 对象**
   *
   * ```JavaScript
   * import AgoraRTM from 'agora-rtm-sdk';
   * const client = AgoraRTM.createInstance('demoAppId', { enableLogUpload: false }); // Pass your App ID here.
   * ```
   * @param appId 传入项目的 App ID。ASCII 字符，字符串长度为 32 可见字符。
   * @param params `RtmClient` 对象的配置参数。
   * @return 一个 `RtmClient` 对象实例。
   */
  /**
   * Creates and returns an `RtmClient` instance.
   * <p>The Agora RTM SDK supports creating multiple {@link RtmClient} instances.</p>
   * <p>All methods in the {@link RtmClient} class are executed asynchronously.</p>
   * @example **Create an RtmClient instance**
   *
   * ```JavaScript
   * import AgoraRTM from 'agora-rtm-sdk';
   * const client = AgoraRTM.createInstance('demoAppId', { enableLogUpload: false }); // Pass your App ID here.
   * ```
   * @param appId App ID of your project that must be a string containing 32 ASCII characters.
   * @param params The configurable parameters of an `RtmClient` instance.
   * @return An `RtmClient` instance.
   */
  function createInstance(appId: string, params?: RtmParameters): RtmClient;
}

export = AgoraRTM;
export as namespace AgoraRTM;;
